Название базы данных: ourcinema (вы можеье задать любое другое, изменив настройки)
-- Описание таблиц

-- Таблица фильмов(Movie)
-- ид	название  	жанр    страна    	год    	Режиссер    длинна    	Описание    	Рейтинг    файл обложки файл видео
-- id 	title 		genre 	country 	year 	director 	duration 	description 	rating      cover       video

-- Таблица актеров(Actor)
-- ид   Имя
-- id 	name


-- Связующая таблица(Movie_Actor)
-- movie_id	    |   actor_id


-- КОД ДЛЯ СОЗДАНИЯ ТАБЛИЦ
-- В PostgreSQL создаем базу данных с названием "moviegaid"

-- Cоздаем таблицу фильмов:
CREATE TABLE Movie (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title varchar(150) NOT NULL,
    genre varchar(40) NOT NULL,
    country varchar(70) NOT NULL,
    year int CHECK ( year > 1900 ),
    director varchar(40) NOT NULL,
    duration varchar(20) NOT NULL,
    description varchar NOT NULL,
    rating real,
    cover varchar,
    video varchar
)

-- Cоздаем таблицу актеров:
CREATE TABLE Actor(
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar(100) NOT NULL UNIQUE
);

-- Cоздаем связывающую таблицу:

CREATE TABLE Movie_Actor(
	movie_id int REFERENCES Movie(id) ON DELETE CASCADE,
    actor_id int REFERENCES Actor(id) ON DELETE CASCADE,
    PRIMARY KEY (movie_id, actor_id)
);


-- Добавление тестовых данных в таблицы (при необходимости)

-- Добавление фильмов:
INSERT INTO Movie(title, genre, country, year, director, duration, description, rating)
VALUES('Американка', 'Драма', 'Россия', 1997, 'Дмитрий Месхиев', '1ч 30мин', 'Молодой парень Лешка Колядко, подчиняющийся внешне всем законам уличного братства (портвейн, беломор, драки),
 тяжело переживает дурацкую гибель старшего брата, разбившегося на мотоцикле.
 Брат был для него кумиром, человеком легендарным, уважаемым даже врагами с кирпичного за безумное бесстрашие.
 Брат гулял с девчонкой, отбитой у ребят все с того же кирпичного, таких же хулиганов, что и во всех районах.
Он гонял на мотоцикле в кожаной, летчиковской, куртке отца и в шлеме с номером 13, за ним сидела его девушка Таня,
 а за ней, трепетно касаясь ее, младший брат, еще не понимающий, что обожает и любит не только брата, но и эту девушку.
 Осознать он этого и не мог - она была девушкой брата, а значит, святой и как бы невозможной...', 5.7, 'amerikanka.jpg',
 'Amerikanka.mp4');

INSERT INTO Movie(title, genre, country, year, director, duration, description, rating)
VALUES('Афоня', 'Комедия', 'СССР', 1975, 'Георгий Данелия', '1ч 27мин', 'Весело и беззаботно жил слесарь-сантехник Афанасий. Не гнушался левыми заработками, любил выпить, поволочиться за девушками.
 Так проходил день за днём, но однажды он встретил на танцах удивительную девушку изменившую все.
 Она спасла Борщова от хулиганов, а ее наивные глаза сгубили нежную душу работника труб и прокладок.', 7.2, 'afonya.jpg',
 'Afonya.mp4');

INSERT INTO Movie(title, genre, country, year, director, duration, description, rating)
VALUES('Белые росы', 'Романтическая комедия', 'СССР', 1983, 'Игорь Добролюбов', '1ч 23мин', 'Ветеран труда и трех войн, уважаемый человек в деревне Белые росы — Федор Ходас уже давно овдовел
 и имеет трех взрослых сыновей. Старший чрезмерно расчетлив, младший чересчур весел. Средний уехал на Курилы и каков он теперь отцу неведомо. Но за всех у старика душа болит,
 особенно за младшего балагура…', 6.5, 'br.jpg', 'BR.mp4');

INSERT INTO Movie(title, genre, country, year, director, duration, description, rating)
VALUES('Между ангелом и бесом', 'Комедийный боевик', 'Франция', 1995, 'Жан-Мари Пуаре', '1ч 46мин', 'Владелец знаменитого парижского кабаре "Карко", любимец женщин Антуан Карко,
 внезапно оказывается втянутым в головокружительную операцию по спасению маленького китайского мальчика Бао. Карко вылетает в Гонконг за
 ребенком и значительной суммой денег. За ним и Бао гонится мафия, но Карко умудряется с помощью священника
 Тарэна вывезти мальчика в Париж. Но помимо мафии, Карко и Тарэна преследуют ангелы... Только Карко - его совесть,
 ангел-хранитель, а Тарэна - ангел-искуситель...', 6.3, 'les_angels_gradie.jpg', 'Les_Anges_Gardiens.mp4');


-- Добавление актеров(и связь с фильмом):
-- Для фильма "Американка"
INSERT INTO Actor(name) VALUES('Нина Усатова');
INSERT INTO Movie_Actor VALUES(1,  1);

INSERT INTO Actor(name) VALUES('Виктор Бычков');
INSERT INTO Movie_Actor VALUES(1,  2);

INSERT INTO Actor(name) VALUES('Наталья Данилова');
INSERT INTO Movie_Actor VALUES(1,  3);

INSERT INTO Actor(name) VALUES('Юрий Кузнецов');
INSERT INTO Movie_Actor VALUES(1,  4);

INSERT INTO Actor(name) VALUES('Андрей Краско');
INSERT INTO Movie_Actor VALUES(1,  5);

INSERT INTO Actor(name) VALUES('Сергей Васильев');
INSERT INTO Movie_Actor VALUES(1,  6);

-- Для фильма "Афоня"
INSERT INTO Actor(name) VALUES('Леонид Куравлев');
INSERT INTO Movie_Actor VALUES(2,  7);

INSERT INTO Actor(name) VALUES('Евгения Симонова');
INSERT INTO Movie_Actor VALUES(2,  8);

INSERT INTO Actor(name) VALUES('Евгений Леонов');
INSERT INTO Movie_Actor VALUES(2,  9);

INSERT INTO Actor(name) VALUES('Савелий Крамаров');
INSERT INTO Movie_Actor VALUES(2,  10);

INSERT INTO Actor(name) VALUES('Нина Маслова');
INSERT INTO Movie_Actor VALUES(2,  11);

INSERT INTO Actor(name) VALUES('Борислав Брондуков');
INSERT INTO Movie_Actor VALUES(2,  12);

INSERT INTO Actor(name) VALUES('Валентина Талызина');
INSERT INTO Movie_Actor VALUES(2,  13);

INSERT INTO Actor(name) VALUES('Нина Русланова');
INSERT INTO Movie_Actor VALUES(2,  14);


-- Для фильма "Белые росы"
INSERT INTO Actor(name) VALUES('Николай Караченцев');
INSERT INTO Movie_Actor VALUES(3,  15);

INSERT INTO Actor(name) VALUES('Всеволод Санаев');
INSERT INTO Movie_Actor VALUES(3,  16);

INSERT INTO Actor(name) VALUES('Михаил Кокшенов');
INSERT INTO Movie_Actor VALUES(3,  17);

INSERT INTO Actor(name) VALUES('Геннадий Гарбук');
INSERT INTO Movie_Actor VALUES(3,  18);

INSERT INTO Actor(name) VALUES('Борис Новиков');
INSERT INTO Movie_Actor VALUES(3,  19);

INSERT INTO Actor(name) VALUES('Наталья Харахорина');
INSERT INTO Movie_Actor VALUES(3,  20);

INSERT INTO Actor(name) VALUES('Станислав Садальский');
INSERT INTO Movie_Actor VALUES(3,  21);

INSERT INTO Actor(name) VALUES('Стефания Станюта');
INSERT INTO Movie_Actor VALUES(3,  22);

INSERT INTO Actor(name) VALUES('Александр Беспалый');
INSERT INTO Movie_Actor VALUES(3,  23);

INSERT INTO Actor(name) VALUES('Юля Космачева');
INSERT INTO Movie_Actor VALUES(3,  24);

INSERT INTO Actor(name) VALUES('Галина Макарова');
INSERT INTO Movie_Actor VALUES(3,  25);

INSERT INTO Actor(name) VALUES('Ирина Егорова');
INSERT INTO Movie_Actor VALUES(3,  26);

INSERT INTO Actor(name) VALUES('Юрий Кухаренок');
INSERT INTO Movie_Actor VALUES(3,  27);

-- Для фильма "Между ангелом и бесом"
INSERT INTO Actor(name) VALUES('Жерар Депардье');
INSERT INTO Movie_Actor VALUES(4,  28);

INSERT INTO Actor(name) VALUES('Кристиан Клавье');
INSERT INTO Movie_Actor VALUES(4,  29);

INSERT INTO Actor(name) VALUES('Эва Гримальди');
INSERT INTO Movie_Actor VALUES(4,  30);

INSERT INTO Actor(name) VALUES('Ив Ренье');
INSERT INTO Movie_Actor VALUES(4,  31);

INSERT INTO Actor(name) VALUES('Эва Герцигова');
INSERT INTO Movie_Actor VALUES(4,  32);

INSERT INTO Actor(name) VALUES('Анна Гейлор');
INSERT INTO Movie_Actor VALUES(4,  33);

INSERT INTO Actor(name) VALUES('Оливье Ашар');
INSERT INTO Movie_Actor VALUES(4,  34);

INSERT INTO Actor(name) VALUES('Жан Шампьон');
INSERT INTO Movie_Actor VALUES(4,  35);
--

-- Примеры запросов SQL напрямую(для теста)
-- Общий запрос к таблице фильмов:
SELECT title, genre, country, year, director, duration, description, rating FROM Movie

-- Запрос для выгрузки актеров и фильмов(выведет все названия фильмов с актерами):
SELECT Movie.title, Actor.name FROM Actor JOIN Movie_Actor
    on Actor.id = Movie_actor.actor_id JOIN Movie
                 on Movie_Actor.movie_id = Movie.id;

-- Запрос (JOIN) - выгрузит фильмы с полным описание и актеров к каждому фильму:
SELECT Movie.title, Movie.genre, Movie.country, Movie.year, Movie.director,
       Movie.duration, Movie.description, Movie.rating, Actor.name
FROM Actor JOIN Movie_Actor on Actor.id = Movie_Actor.actor_id JOIN Movie on Movie_Actor.movie_id = Movie.id;

-- Запрос (JOIN) - выгрузит актеров к конкретному фильму по ID фильма:
SELECT Actor.name FROM Actor
    JOIN Movie_Actor on Actor.id = Movie_Actor.actor_id
    JOIN Movie on Movie_Actor.movie_id = Movie.id WHERE Movie.id = 2;
--------------------------------------------------------------------------

